<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>hexo发布带图片博客</title>
    <link href="/2022/10/20/hexo%E5%8F%91%E5%B8%83%E5%B8%A6%E5%9B%BE%E7%89%87%E5%8D%9A%E5%AE%A2/"/>
    <url>/2022/10/20/hexo%E5%8F%91%E5%B8%83%E5%B8%A6%E5%9B%BE%E7%89%87%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="1-sql注入"><a href="#1-sql注入" class="headerlink" title="1.sql注入"></a>1.sql注入</h2><h3 id="1-攻击"><a href="#1-攻击" class="headerlink" title="1.攻击"></a>1.攻击</h3><p>SQL:mysql,oracle,mssql(sqlserver)</p><p>sql注入是一种常见的web安全漏洞,攻击者利用这个漏洞,可以访问或修改数据,或者利用潜在的数据库漏洞进行攻击</p><p>union前后查询的表列数要一致,查询结果相同自动删除</p><p>能够存在sql注入的条件:后端语言能够与数据库进行交互,并且这个参数是用户输入,传递到服务器的变量,不能进行严重的过滤</p><p>根据数据类型:整形注入  字符型注入</p><h4 id="1-1-联合注入"><a href="#1-1-联合注入" class="headerlink" title="1.1 联合注入"></a>1.1 联合注入</h4><p>条件:有显示位,</p><p>此处的注入思路适用于所有的注入方式:</p><p>在有显示位以后,对注入点进行判断,首先判断是整型注入点还是字符型注入点,通过1+1的页面显示进行判断,如果1+1页面与页面1显示一致,证明是字符型注入点,反之则是整型注入点</p><p>然后就应该对闭合方式进行判断,如果页面没有报错,有没有源码的情况下很难对闭合方式进行盲测, 所以最好的方式是扒源码,然后进行代码审计,在代码里面所有的东西都一目了然, 或者采用sqlmap进行注入检测, 但是sqlmap只能检测3个字符及以内的闭合方式, 太变态的闭合方式sqlmap没有办法进行检测, 如果不能,从’”开始进行,闭合方式也就是’ “ )进行组合.必和失败页面显示是不正常的,</p><p>闭合结束后, 对显示行数进行查看, 采用order by n, 正整数n 从1开始一次往上加,知道页面显示不正常,比如order by 2正常 order by  3不正常,那么此页面的显示位就只有2</p><p>判断完显示位以后通过相对应的注入方式对语句进行构造, 然后显示出我们想查询的信息</p><p>联合注入的一个弊端是union前后的语句查询出来的显示位数必须一致</p><h6 id="判断整型注入和字符型注入"><a href="#判断整型注入和字符型注入" class="headerlink" title="判断整型注入和字符型注入"></a>判断整型注入和字符型注入</h6><p>黑盒,1 and 1=1,1 and 1=2,回显一致字符串类型,不一致整形</p><p>1’ “再根据报错回显判断是什么闭合</p><p>-1/+1回显上一个页面或下一个页面,整形,字符型不会发生变化</p><p>and sleep(5) 根据页面返回时间进行判断,字符型立刻出,整型5秒出</p><h6 id="注入的类型分类"><a href="#注入的类型分类" class="headerlink" title="注入的类型分类"></a>注入的类型分类</h6><p>联合注入,宽字节注入,二次注入,报错注入,布尔注入,时间注入(基于时间延迟注入),堆叠(可多语句查询注入)</p><p>堆叠5.0一下都存在</p><p>堆叠的语句构造只需要使用:隔开,就能进行下一个语句,不用进行闭合什么的.非常方便,但是现在堆叠已经很少见了</p><h6 id="MySQL的3种注释风格"><a href="#MySQL的3种注释风格" class="headerlink" title="MySQL的3种注释风格"></a>MySQL的3种注释风格</h6><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-meta">#          (url编码%23)</span><br>--         (--后面接一个或多个空格)<br><span class="hljs-comment">/*....*/</span>   (内联注释)<br><span class="hljs-keyword">select</span> * <span class="hljs-comment">/*22222from*/</span> users;(数字大于mysql版本号注释生效,不然就是相当于 <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users;) 绕过waf<br></code></pre></td></tr></table></figure><h6 id="MySQL函数利用"><a href="#MySQL函数利用" class="headerlink" title="MySQL函数利用"></a>MySQL函数利用</h6><p>user()</p><p>System_user()</p><p>Current_user()</p><p>Session_user()</p><p>database()</p><p>@@version    查看版本号</p><p>Version() 查看版本号</p><p>@@basedir    网站存放路径</p><p>@@datadir    数据库存放路径</p><p>@@version_compile_os   查看操作系统是Windows还是Linux</p><h6 id="information-scheme-库"><a href="#information-scheme-库" class="headerlink" title="information_scheme 库"></a>information_scheme 库</h6><p>schemata 表</p><p>​           字段:schema_name</p><p>tables  表</p><p>​           字段:table_schema, table_name</p><p>columns  表</p><p>​           字段:table_schema, table_name, column_name</p><h6 id="测一个表有几列"><a href="#测一个表有几列" class="headerlink" title="测一个表有几列"></a>测一个表有几列</h6><p>order by N, N&lt;=列数,会有结果,N&gt;列数,会报错</p><h6 id="常用的语句"><a href="#常用的语句" class="headerlink" title="常用的语句"></a>常用的语句</h6><p>列出所有的数据库</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">(一个个展示):<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">schema_name</span> <span class="hljs-keyword">from</span> information_scheme.schemata <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span> <br>(一块展示) :<br><span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">schema_name</span>)<span class="hljs-keyword">from</span> information_schema.schemata<br></code></pre></td></tr></table></figure><p>列出数据库(test)中的所有表</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">(一个个展示):<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">table_name</span> <span class="hljs-keyword">from</span> information_scheme.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;test&#x27;</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span> <br>(一块展示) :<br><span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">table_name</span>)<span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;test&#x27;</span><br></code></pre></td></tr></table></figure><p>列出(数据库test,表admin)中所有的字段</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">(一个个展示):<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">column_name</span> <span class="hljs-keyword">from</span> information_scheme.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;test&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">table_name</span>=<span class="hljs-string">&#x27;admin&#x27;</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span> <br>(一块展示) :<br><span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">column_name</span>)<span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;test&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">table_name</span>=<span class="hljs-string">&#x27;admin&#x27;</span><br></code></pre></td></tr></table></figure><h6 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h6><p>load_file(),out_file()需要的条件</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs makefile">绝对路径,<br>读写权限,<br>不开启全局gpc,<br>secure_file_priv=<br></code></pre></td></tr></table></figure><p><img src="/.com//1.png"></p><p>load_file()    out_file()的区别是一个采用文件路径然后对该路径进行修改,改到目标文件地址, 再对目标文件进行读操作</p><p>into out_file() 通过文件名字, 将内容写进去,在这里的文件名不能已经存在,执行语句的时候会创建该文件</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>第一篇sql注入</title>
    <link href="/2022/10/20/%E7%AC%AC%E4%B8%80%E7%AF%87sql%E6%B3%A8%E5%85%A5/"/>
    <url>/2022/10/20/%E7%AC%AC%E4%B8%80%E7%AF%87sql%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h2 id="1-sql注入"><a href="#1-sql注入" class="headerlink" title="1.sql注入"></a>1.sql注入</h2><h3 id="1-攻击"><a href="#1-攻击" class="headerlink" title="1.攻击"></a>1.攻击</h3><p>SQL:mysql,oracle,mssql(sqlserver)</p><p>sql注入是一种常见的web安全漏洞,攻击者利用这个漏洞,可以访问或修改数据,或者利用潜在的数据库漏洞进行攻击</p><p>union前后查询的表列数要一致,查询结果相同自动删除</p><p>能够存在sql注入的条件:后端语言能够与数据库进行交互,并且这个参数是用户输入,传递到服务器的变量,不能进行严重的过滤</p><p>根据数据类型:整形注入  字符型注入</p><h4 id="1-1-联合注入"><a href="#1-1-联合注入" class="headerlink" title="1.1 联合注入"></a>1.1 联合注入</h4><p>条件:有显示位,</p><p>此处的注入思路适用于所有的注入方式:</p><p>在有显示位以后,对注入点进行判断,首先判断是整型注入点还是字符型注入点,通过1+1的页面显示进行判断,如果1+1页面与页面1显示一致,证明是字符型注入点,反之则是整型注入点</p><p>然后就应该对闭合方式进行判断,如果页面没有报错,有没有源码的情况下很难对闭合方式进行盲测, 所以最好的方式是扒源码,然后进行代码审计,在代码里面所有的东西都一目了然, 或者采用sqlmap进行注入检测, 但是sqlmap只能检测3个字符及以内的闭合方式, 太变态的闭合方式sqlmap没有办法进行检测, 如果不能,从’”开始进行,闭合方式也就是’ “ )进行组合.必和失败页面显示是不正常的,</p><p>闭合结束后, 对显示行数进行查看, 采用order by n, 正整数n 从1开始一次往上加,知道页面显示不正常,比如order by 2正常 order by  3不正常,那么此页面的显示位就只有2</p><p>判断完显示位以后通过相对应的注入方式对语句进行构造, 然后显示出我们想查询的信息</p><p>联合注入的一个弊端是union前后的语句查询出来的显示位数必须一致</p><h6 id="判断整型注入和字符型注入"><a href="#判断整型注入和字符型注入" class="headerlink" title="判断整型注入和字符型注入"></a>判断整型注入和字符型注入</h6><p>黑盒,1 and 1=1,1 and 1=2,回显一致字符串类型,不一致整形</p><p>1’ “再根据报错回显判断是什么闭合</p><p>-1/+1回显上一个页面或下一个页面,整形,字符型不会发生变化</p><p>and sleep(5) 根据页面返回时间进行判断,字符型立刻出,整型5秒出</p><h6 id="注入的类型分类"><a href="#注入的类型分类" class="headerlink" title="注入的类型分类"></a>注入的类型分类</h6><p>联合注入,宽字节注入,二次注入,报错注入,布尔注入,时间注入(基于时间延迟注入),堆叠(可多语句查询注入)</p><p>堆叠5.0一下都存在</p><p>堆叠的语句构造只需要使用:隔开,就能进行下一个语句,不用进行闭合什么的.非常方便,但是现在堆叠已经很少见了</p><h6 id="MySQL的3种注释风格"><a href="#MySQL的3种注释风格" class="headerlink" title="MySQL的3种注释风格"></a>MySQL的3种注释风格</h6><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-meta">#          (url编码%23)</span><br>--         (--后面接一个或多个空格)<br><span class="hljs-comment">/*....*/</span>   (内联注释)<br><span class="hljs-keyword">select</span> * <span class="hljs-comment">/*22222from*/</span> users;(数字大于mysql版本号注释生效,不然就是相当于 <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users;) 绕过waf<br></code></pre></td></tr></table></figure><h6 id="MySQL函数利用"><a href="#MySQL函数利用" class="headerlink" title="MySQL函数利用"></a>MySQL函数利用</h6><p>user()</p><p>System_user()</p><p>Current_user()</p><p>Session_user()</p><p>database()</p><p>@@version    查看版本号</p><p>Version() 查看版本号</p><p>@@basedir    网站存放路径</p><p>@@datadir    数据库存放路径</p><p>@@version_compile_os   查看操作系统是Windows还是Linux</p><h6 id="information-scheme-库"><a href="#information-scheme-库" class="headerlink" title="information_scheme 库"></a>information_scheme 库</h6><p>schemata 表</p><p>​           字段:schema_name</p><p>tables  表</p><p>​           字段:table_schema, table_name</p><p>columns  表</p><p>​           字段:table_schema, table_name, column_name</p><h6 id="测一个表有几列"><a href="#测一个表有几列" class="headerlink" title="测一个表有几列"></a>测一个表有几列</h6><p>order by N, N&lt;=列数,会有结果,N&gt;列数,会报错</p><h6 id="常用的语句"><a href="#常用的语句" class="headerlink" title="常用的语句"></a>常用的语句</h6><p>列出所有的数据库</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">(一个个展示):<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">schema_name</span> <span class="hljs-keyword">from</span> information_scheme.schemata <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span> <br>(一块展示) :<br><span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">schema_name</span>)<span class="hljs-keyword">from</span> information_schema.schemata<br></code></pre></td></tr></table></figure><p>列出数据库(test)中的所有表</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">(一个个展示):<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">table_name</span> <span class="hljs-keyword">from</span> information_scheme.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;test&#x27;</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span> <br>(一块展示) :<br><span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">table_name</span>)<span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;test&#x27;</span><br></code></pre></td></tr></table></figure><p>列出(数据库test,表admin)中所有的字段</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">(一个个展示):<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">column_name</span> <span class="hljs-keyword">from</span> information_scheme.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;test&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">table_name</span>=<span class="hljs-string">&#x27;admin&#x27;</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span> <br>(一块展示) :<br><span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">column_name</span>)<span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;test&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">table_name</span>=<span class="hljs-string">&#x27;admin&#x27;</span><br></code></pre></td></tr></table></figure><h6 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h6><p>load_file(),out_file()需要的条件</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs makefile">绝对路径,<br>读写权限,<br>不开启全局gpc,<br>secure_file_priv=<br></code></pre></td></tr></table></figure><p><img src="/.com//新建文件夹\实训三工具\Typora\截图\image-20220915155111884.png/1.jpg" alt="image-20220915155111884"></p><p>load_file()    out_file()的区别是一个采用文件路径然后对该路径进行修改,改到目标文件地址, 再对目标文件进行读操作</p><p>into out_file() 通过文件名字, 将内容写进去,在这里的文件名不能已经存在,执行语句的时候会创建该文件</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/10/20/hello-world/"/>
    <url>/2022/10/20/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>111</title>
    <link href="/2020/10/27/111/"/>
    <url>/2020/10/27/111/</url>
    
    <content type="html"><![CDATA[<p>vdhew吧v并不方便吧v</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
